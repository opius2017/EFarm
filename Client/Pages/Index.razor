@page "/"
@implements IDisposable
@inject HttpClient httpClient;
@inject AppState appState;
<section class="section-products">
	<div class="container">
		<div class="row justify-content-center text-center">
			<div class="col-md-8 col-lg-6">
				<div class="header">
					<h2>Popular Products</h2>
				</div>
			</div>
		</div>
		<div class="row">
			@foreach (var product in Products)
			{
				<div class="col-md-6 col-lg-4 col-xl-3">
					<NavLink href="@GetLink(product)">
					<div id="product-1" class="single-product">
						<div class="part-1" style="background:url(@product.PictureUri) no-repeat center">
							<ul>
								<li><a href="#" title="Add to Basket" @onclick="()=>AddToCart(product)" ><i class="fas fa-shopping-cart"></i></a></li>
								<li><NavLink href="@GetLink(product)"><i class="fas fa-eye"></i></NavLink></li>
							</ul>
						</div>
						<div class="part-2">
							<h3 class="product-title">
								<NavLink href="@GetLink(product)">@product.Name</NavLink>
								</h3>
							@if(product.OldPrice.HasValue){<h4 class="product-old-price">$@product.OldPrice</h4>}
							
							<h4 class="product-price">$@product.Price</h4>
						</div>
                        </div>
                    </NavLink>
				</div>
			}
		
		</div>
	</div>
</section>
@code{
	public IEnumerable<Product> Products { get; set; }
	private Basket Basket = null!;
	[Parameter]
	public EventCallback<int> OnProductAdded { get; set; }
	public async Task AddToCart(Product product) {
		await httpClient.PostAsJsonAsync("basket/add", product);
		appState.OnStateChange+=	StateHasChanged;
	}
	public string GetLink(Product product) => $"/product/{product.Id}";
	protected override async Task OnInitializedAsync()
	{
		try
		{
		 Basket = await httpClient.GetFromJsonAsync<Basket>("basket");
			Products = await httpClient.GetFromJsonAsync<IEnumerable<Product>>("products");
		}
		catch (Exception ex)
		{

			throw ex;
		}


	}
	public void Dispose()
	{
		appState.OnStateChange -= StateHasChanged;
	}
}